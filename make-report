#!/usr/bin/python3
# TODO: Add comments explaining EVERYTHING.
# TODO: Table of Contents.
# TODO: References.

import datetime
import argparse
import docx


# Constants
REPORT_FILE = "report.docx"
SUMMARY = "summary.txt"
INTRODUCTION = "introduction.txt"
BODY = "body.txt"
CONCLUSION = "conclusion.txt"
APPENDICES = "appendices.txt"
FONT = "Symbola"


def setStyle(document):
    '''Sets document style

    Args:
        document (Document): A docx.Document objecy.
    '''
    styles = document.styles
    styles['Normal'].font.size = docx.shared.Pt(12)

    for x in ['Normal', 'Heading 1', 'Heading 2', 'Heading 3']:
        styles[x].font.name = FONT
        styles[x].font.color.rgb = docx.shared.RGBColor(0x00, 0x00, 0x00)


def generateTitlePage(document):
    ''' Generates title page from arguments given at program invocation.

    Args:
        document (Document): A docx.Document objecy.
    '''
    titleHead = document.add_heading('\n' * 12 + arguments['title'][0], 1)

    titleHead.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.CENTER

    p = document.add_paragraph('\n' * 14)
    p.paragraph_format.line_spacing = 1.5

    p.add_run(arguments['name'][0] + '\n')
    p.add_run(arguments['student_number'][0] + '\n\n')
    p.add_run(arguments['course_code'][0] + '\n')
    p.add_run(arguments['date'])

    p.paragraph_format.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT


def generateGenericSection(document, reference):
    ''' Generates an summary, introduction, or conclusion from file reference.

    Args:
        document (Document): A docx.Document object.

    Return:
        int: -1 if error, 0 otherwise.
        table_of_contents (Paragraph): If the section just generated was the
                                       summary.
    '''

    try:
        open_file = open(reference, 'r')
        lines = open_file.readlines()

    except Exception:
        print("There was a problem opening " + reference + ". Quitting.")
        return -1

    document.add_page_break()

    section_title = reference[:-4].capitalize()

    document.add_heading('\n\t' * 3 + section_title + '\n', 2)

    for line in lines:
        if line != '\n':
            p = document.add_paragraph()
            p.paragraph_format.first_line_indent = docx.shared.Inches(0.5)
            p.paragraph_format.line_spacing = 2
            p.paragraph_format.space_after = docx.shared.Pt(6)

            p.add_run(line)

    print(section_title + ": Done.")

    if 'summary' in reference:
        document.add_page_break()
        document.add_heading("\n\n\tTable of Contents\n", 2)
        table_of_contents = document.add_paragraph()

        return table_of_contents

    return 0


def generateBody(document, reference):
    ''' Generates the body from file reference and table of contents, based on
        the headings (lines starting with '#x') in that file.

    Args:
        document (Document): A docx.Document object.

    Return:
        headings_and_subs (list): As ['1. Heading', ['1.1 Sub1', '1.2 Sub2']].
        int: -1 if there is a problem opening the file.
    '''

    try:
        open_file = open(reference, 'r')
        lines = open_file.readlines()

    except Exception:
        print("There was a problem opening " + reference + ". Quitting.")
        return -1

    document.add_page_break()

    heading_count = 0
    subheading_count = 0
    headings_and_subs = []
    subheadings = []

    for line in lines:
        if line[:3] == '## ':
            heading_count += 1
            subheading_count = 0

            if subheadings:
                headings_and_subs.append(subheadings)

            headings_and_subs.append('\n' + str(heading_count) + '.' + '\t' +
                                     line[2:])

            document.add_heading('\n' + str(heading_count) + '.' +
                                 line[2:], 2)

            subheadings = []

        elif line[:3] == '###':
            subheading_count += 1

            subheadings.append('\t\t' + str(heading_count) + '.' +
                               str(subheading_count) + '\t' + line[3:])

            document.add_heading('\t' + str(heading_count) + '.' +
                                 str(subheading_count) + '.' +
                                 line[3:], 3)

        elif line != '\n':
            p = document.add_paragraph()
            p.paragraph_format.line_spacing = 2
            p.paragraph_format.first_line_indent = docx.shared.Inches(0.5)
            p.paragraph_format.space_after = docx.shared.Pt(6)
            p.add_run(line)

    return headings_and_subs


def generateTableOfContents(headings_and_subs, table_of_contents):
    table_of_contents.paragraph_format.line_spacing = 2

    for heading in headings_and_subs:
        table_of_contents.add_run(heading)


def parseArguments():
    ''' Parses the arguments given at program invocation.

    Returns:
        arguments (dict): Contains 'name', 'title', 'course_code', 'date'.

    '''

    description = (
        "\n   Generate an engineering report in .docx format.\n\n"

        "Title page is generated from arguments passed at program invocation,"
        "\nas explained below.\n\n"

        "Summary is taken from file 'summary.txt' in the present directory.\n"

        "\nTable of Contents is auto-generated.\n\n"

        "Introduction is taken from the file 'introduction.txt' in present"
        "\ndirectory.\n\n"

        "The Body of the report is taken from file 'body.txt' in the present"
        "\ndirectory. All lines beginning with '##' are used as section\n"
        "headings ('##' is replaced with progressive section numberings).\n"
        "'###' are sub-headings. These will be used in auto-generating the"
        "\ntable of contents.\n\n"

        "The Conclusions section is taken from file 'conclusion.txt'.\n\n"

        "The optional References section will be generated from 'body.txt'"
        "\nfrom any use of '_x*' in the text, where 'x' is a number. The"
        "\nactual references should be included at the end of 'body.txt'.\n\n"

        "The optional Appendices section are taken from 'appendices.txt' if"
        "\nit exists in the current directory.\n")

    options = argparse.ArgumentParser(description=description,
                                      formatter_class=argparse.
                                      RawTextHelpFormatter)

    options.add_argument('-n', required=True, help='Name for Title Page. '
                         'Surround by double quotes. E.g. "John Smith".',
                         dest='name', nargs=1)

    options.add_argument('-s', help='Student number.', dest='student_number',
                         nargs=1, default='  ')

    options.add_argument('-c', required=True, help='Course Code. Eg CENG251.',
                         nargs=1, dest='course_code')

    options.add_argument('-t', required=True, help='Title of the report. '
                         'Surround by double quotes. E.g. "Implementing '
                         'getopt()".', dest='title', nargs=1)

    options.add_argument('-d', help='Optional date. If missing, today\'s '
                         'date will be used, in format Month Day, Year.'
                         'Surround by double quotes. E.g. "12/31/2000".',
                         dest='date', nargs=1, default=datetime.date.today().
                         strftime("%B %d, %Y").replace(" 0", " "))

    return vars(options.parse_args())


arguments = parseArguments()

document = docx.Document()

setStyle(document)

generateTitlePage(document)

table_of_contents = generateGenericSection(document, SUMMARY)

generateGenericSection(document, INTRODUCTION)

headings_and_subs = generateBody(document, BODY)

generateTableOfContents(headings_and_subs, table_of_contents)

generateGenericSection(document, CONCLUSION)

document.save(REPORT_FILE)
