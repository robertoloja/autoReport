#!/usr/bin/python3
import sys
import datetime
import argparse
import docx

# Constants
REPORT_FILE  = "report.docx"
SUMMARY      = "summary.txt"
INTRODUCTION = "introduction.txt"
BODY         = "body.txt"
CONCLUSION   = "conclusion.txt"
APPENDICES   = "appendices.txt"
FONT         = "Symbola"


def setStyle(document):
    '''Sets document style'''
    styles = document.styles
    styles['Normal'].font.size = docx.shared.Pt(12)

    for x in ['Normal', 'Heading 1', 'Heading 2']:
        styles[x].font.name = FONT
        styles[x].font.color.rgb = docx.shared.RGBColor(0x00,0x00,0x00)


def generateTitlePage(document):
    ''' Generates title page from arguments given at program invocation.

    Args:
        document (Document): A docx.Document objecy.
    '''
    titleHead = document.add_heading('\n' * 14 + arguments['title'][0], 1)

    titleHead.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.CENTER

    p = document.add_paragraph('\n' * 18)
    p.add_run(arguments['name'][0] + '\n')
    p.add_run(arguments['course_code'][0] + '\n')
    p.add_run(arguments['date'])
    p.paragraph_format.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
    document.add_page_break()


def generateGenericSection(document, reference):
    ''' Generates an summary, introduction, or conclusion from file reference.

    Args:
        document (Document): A docx.Document object.

    Return:
        int: -1 if error, 0 otherwise.
    '''
    try:
        open_file = open(reference, 'r')
        lines = open_file.readlines()

    except Exception:
        print("There was a problem opening " + reference + ". Quitting.")
        return -1

    section_title = reference[:-4].capitalize()

    document.add_heading('\n' * 3 + section_title + '\n' * 2, 2)

    p = document.add_paragraph()
    p.paragraph_format.line_spacing = 2

    for line in lines:
        p.add_run(line)

    document.add_page_break()
    print(section_title + ": Done.")

    return 0


def generateBodyAndTableOfContents(document, reference):
    try:
        open_file = open(reference, 'r')
        lines = open_file.readlines()

    except Exception:
        print("There was a problem opening " + reference + ". Quitting.")
        return -1

    heading_count = 1

    for line in lines:
        if line[:2] == '#x':
            document.add_heading('\n' + str(heading_count) + "." +
                    line[2:], 2)
            heading_count += 1
            p = document.add_paragraph()
            p.paragraph_format.line_spacing = 2

        elif not line:
            p.add_run('\n')

        else:
            p.add_run(line)

    document.add_page_break()


def parseArguments():
    ''' Parses the arguments given at program invocation.

    Returns:
        arguments (dict): Contains 'name', 'title', 'course_code', 'date'.

    '''

    description = ("\n   Generate an engineering report in .docx format.\n\n"

    "Title page is generated from arguments passed at program invocation,\n"
    "as explained below.\n\n"

    "Summary is taken from file 'summary.txt' in the present directory.\n\n"

    "Table of Contents is auto-generated.\n\n"

    "Introduction is taken from the file 'introduction.txt' in the present\n"
    "directory.\n\n"

    "The Body of the report is taken from file 'body.txt' in the present\n"
    "directory. All lines beginning with '#x' are used as section headings\n"
    "('#x' is replaced with progressive section numberings). These will be\n"
    "used in auto-generating the table of contents.\n\n"

    "The Conclusions section is taken from file 'conclusion.txt'.\n\n"

    "The optional References section will be generated from 'body.txt' from\n"
    "any use of '_x*' in the text, where 'x' is a number. The actual\n"
    "references should then be included at the end of 'body.txt'.\n\n"

    "The optional Appendices section are taken from 'appendices.txt' if it\n"
    "exists in the current directory.\n")

    options = argparse.ArgumentParser(description=description,
                formatter_class=argparse.RawTextHelpFormatter)

    options.add_argument('-n', required=True, help='Name for Title Page. '
            'Surround by double quotes. E.g. "John Smith".',dest='name',nargs=1)

    options.add_argument('-c', required=True, help='Course Code. E.g. CENG251.',
            nargs=1, dest='course_code')

    options.add_argument('-t', required=True, help='Title of the report. '
            'Surround by double quotes. E.g. "Implementing getopt()".',
            dest='title', nargs=1)

    options.add_argument('-d', help='Optional date. If not supplied, today\'s '
            'date will be used, in format MONTH DAY, YEAR. Surround by '
            'double quotes. E.g. "12/31/2000".', dest='date', nargs=1,
            default=datetime.date.today().strftime("%B %d, %Y").replace(" 0",
                " "))

    return vars(options.parse_args())


arguments = parseArguments()

document = docx.Document()

setStyle(document)

generateTitlePage(document)
generateGenericSection(document, SUMMARY)
generateGenericSection(document, INTRODUCTION)
generateBodyAndTableOfContents(document, BODY)

document.save(REPORT_FILE)
